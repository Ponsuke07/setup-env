---
- name: check existence of neovim
  stat: path=/usr/local/bin/nvim
  register: nvim_bin

- name: block for install nvim from source
  when: not nvim_bin.stat.exists
  block:
    - name: install build tools for neovim
      apt:
        state: present
        update_cache: yes
        cache_valid_time: 86400
        pkg:
          - make
          - build-essential
          - ninja-build
          - gettext
          - libtool
          - libtool-bin
          - autoconf
          - automake
          - cmake
          - g++
          - pkg-config
          - unzip
          - curl
      become: yes

    - name: clone neovim from github
      git:
        repo: https://github.com/neovim/neovim.git
        dest: /tmp/neovim
        version: stable

    - name: build neovim
      shell: "{{ item }}"
      args:
        chdir: /tmp/neovim
      with_items:
        - make
        - make CMAKE_BUILD_TYPE=RelWithDebInfo

    - name: build neovim
      shell: "{{ item }}"
      args:
        chdir: /tmp/neovim
      with_items:
        - make install
      become: yes

    - name: Setup alius for neovim
      lineinfile:
        dest=~/.bashrc
        line={{ item }}
      with_items:
        - alias vim='nvim'

- name: install packages for neovim
  apt:
    state: present
    update_cache: yes
    cache_valid_time: 86400
    pkg:
      - aspell
      - cscope
      - universal-ctags
      - openjdk-8-jdk
      - openjdk-8-jre
  become: yes

- name: install python modules for neovim
  pip:
    name:
      - vim-vint
      - pynvim
    extra_args: "--break-system-packages"

- name: cleanup vim conf dir
  shell: "rm -rf {{ vim_conf_dir }}"

- name: create
  file: path={{ vim_conf_dir }}/{{ item }} state=directory
  with_items:
    - "init"
    - "plugins"

- name: generate .vimrc
  template: src=vimrc.j2 dest=~/.vimrc

- name: create .confif/nvim
  file:
    path: ~/.config/nvim
    state: directory

- name: generate init.vim for nvim
  template: src=nvim.init.j2 dest=~/.config/nvim/init.vim

- name: generate vim configs for users
  template: src={{ item }} dest={{ vim_conf_dir }}/init/{{ item |basename |regex_replace('\.j2$', '') }}
  with_fileglob:
    - ../templates/init/*.j2

- name: generate vim configs for plugins
  template: src={{ item }} dest={{ vim_conf_dir }}/plugins/{{ item |basename |regex_replace('\.j2$', '') }}
  with_fileglob:
    - ../templates/plugins/*.j2

