---
- name: Check existence of neovim
  ansible.builtin.stat:
    path: /usr/local/bin/nvim
  register: nvim_bin

- name: Block for install nvim from source
  when: not nvim_bin.stat.exists
  block:
    - name: Install build tools for neovim
      ansible.builtin.apt:
        state: present
        update_cache: true
        cache_valid_time: 86400
        pkg:
          - make
          - build-essential
          - ninja-build
          - gettext
          - libtool
          - libtool-bin
          - autoconf
          - automake
          - cmake
          - g++
          - pkg-config
          - unzip
          - curl
      become: true

    - name: Clone neovim from github
      ansible.builtin.git:
        repo: https://github.com/neovim/neovim.git
        dest: /tmp/neovim
        version: stable

    - name: Build neovim
      ansible.builtin.shell: |
        make
        make CMAKE_BUILD_TYPE=RelWithDebInfo
        exit 0
      args:
        chdir: /tmp/neovim
      register: ret
      changed_when: ret.rc != '0'

    - name: Build neovim
      ansible.builtin.shell: |
        make install
      args:
        chdir: /tmp/neovim
      become: true
      register: ret
      changed_when: ret.rc != '0'

    - name: Setup alius for neovim
      ansible.builtin.lineinfile:
        dest: ~/.bashrc
        line: "alias vim='nvim'"

- name: Install packages for neovim
  ansible.builtin.apt:
    state: present
    update_cache: true
    cache_valid_time: 86400
    pkg:
      - aspell
      - cscope
      - universal-ctags
      - openjdk-8-jdk
      - openjdk-8-jre
      - python3-pip
  become: true

- name: Install python modules for neovim (for ubuntu <= 20.04)
  ansible.builtin.pip:
    name:
      - vim-vint
      - pynvim
  when:
    (ansible_distribution == "Ubuntu" and ansible_distribution_major_version <= "20") or
    (ansible_distribution == "Debian" and ansible_distribution_major_version <= "10")

- name: Install python modules for neovim (for ubuntu > 20.04)
  ansible.builtin.pip:
    name:
      - vim-vint
      - pynvim
    extra_args: "--break-system-packages"
  when:
    (ansible_distribution == "Ubuntu" and ansible_distribution_major_version > "20") or
    (ansible_distribution == "Debian" and ansible_distribution_major_version > "10")

- name: Cleanup vim conf dir
  ansible.builtin.file:
    path: "{{ vim_conf_dir }}"
    state: absent

- name: Create vim conf dir
  ansible.builtin.file:
    path: "{{ vim_conf_dir }}/{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - "init"
    - "plugins"

- name: Generate .vimrc
  ansible.builtin.template:
    src: vimrc.j2
    dest: ~/.vimrc
    mode: "0644"

- name: Create .confif/nvim
  ansible.builtin.file:
    path: ~/.config/nvim
    state: directory
    mode: "0755"

- name: Generate init.vim for nvim
  ansible.builtin.template:
    src: nvim.init.j2
    dest: ~/.config/nvim/init.vim
    mode: "0644"

- name: Generate vim configs for users
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ vim_conf_dir }}/init/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  with_fileglob:
    - ../templates/init/*.j2

- name: Generate vim configs for plugins
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ vim_conf_dir }}/plugins/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  with_fileglob:
    - ../templates/plugins/*.j2
